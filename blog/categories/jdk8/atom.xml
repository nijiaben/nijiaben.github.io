<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: jdk8 | 你假笨]]></title>
  <link href="http://nijiaben.github.io/blog/categories/jdk8/atom.xml" rel="self"/>
  <link href="http://nijiaben.github.io/"/>
  <updated>2016-11-10T09:42:31+08:00</updated>
  <id>http://nijiaben.github.io/</id>
  <author>
    <name><![CDATA[你假笨]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[JVM源码分析之JDK8下的僵尸(无法回收)类加载器]]></title>
    <link href="http://nijiaben.github.io/blog/2016/04/24/classloader-unload/"/>
    <updated>2016-04-24T11:21:24+08:00</updated>
    <id>http://nijiaben.github.io/blog/2016/04/24/classloader-unload</id>
    <content type="html"><![CDATA[<h2>概述</h2>

<p>这篇文章基于最近在排查的一个问题，花了我们团队不少时间来排查这个问题，现象是有一些类加载器是作为key放到WeakHashMap里的，但是经历过多次full gc之后，依然坚挺地存在内存里，但是从代码上来说这些类加载器是应该被回收的，因为没有任何强引用可以到达这些类加载器了，于是我们做了内存dump，分析了下内存，发现除了一个WeakHashMap外并没有别的GC ROOT途径达到这些类加载器了，那这样一来经过多次FULL GC肯定是可以被回收的，但是事实却不是这样，为了让这个问题听起来更好理解，还是照例先上个Demo，完全模拟了这种场景。</p>

<!--more-->


<h2>Demo</h2>

<p>首先我们创建两个类AAA和AAB，分别打包到两个不同jar里，比如AAA.jar和AAB.jar，这两个类之间是有关系的，AAA里有个属性是AAB类型的，注意这两个jar不要放到classpath里让appClassLoader加载到：</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="n">public</span> <span class="n">class</span> <span class="n">AAA</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">private</span> <span class="n">AAB</span> <span class="n">aab</span><span class="p">;</span>
</span><span class='line'>        <span class="n">public</span> <span class="nf">AAA</span><span class="p">(){</span>
</span><span class='line'>                <span class="n">aab</span><span class="o">=</span><span class="n">new</span> <span class="n">AAB</span><span class="p">();</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="n">public</span> <span class="kt">void</span> <span class="nf">clear</span><span class="p">(){</span>
</span><span class='line'>                <span class="n">aab</span><span class="o">=</span><span class="n">null</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'><span class="p">}</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">public</span> <span class="n">class</span> <span class="n">AAB</span> <span class="p">{}</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>接着我们创建一个类加载TestLoader，里面存一个WeakHashMap，专门来存TestLoader的，并且复写loadClass方法，如果是加载AAB这个类，就创建一个新的TestLoader来从AAB.jar里加载这个类</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="n">import</span> <span class="n">java</span><span class="p">.</span><span class="n">net</span><span class="p">.</span><span class="n">URL</span><span class="p">;</span>
</span><span class='line'><span class="n">import</span> <span class="n">java</span><span class="p">.</span><span class="n">net</span><span class="p">.</span><span class="n">URLClassLoader</span><span class="p">;</span>
</span><span class='line'><span class="n">import</span> <span class="n">java</span><span class="p">.</span><span class="n">util</span><span class="p">.</span><span class="n">WeakHashMap</span><span class="p">;</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">public</span> <span class="n">class</span> <span class="n">TestLoader</span> <span class="n">extends</span> <span class="n">URLClassLoader</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">public</span> <span class="k">static</span> <span class="n">WeakHashMap</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">TestLoader</span><span class="p">,</span><span class="n">Object</span><span class="o">&gt;</span> <span class="n">map</span><span class="o">=</span><span class="n">new</span> <span class="n">WeakHashMap</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">TestLoader</span><span class="p">,</span><span class="n">Object</span><span class="o">&gt;</span><span class="p">();</span>
</span><span class='line'>        <span class="n">private</span> <span class="k">static</span> <span class="kt">int</span> <span class="n">count</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span>
</span><span class='line'>        <span class="n">public</span> <span class="nf">TestLoader</span><span class="p">(</span><span class="n">URL</span><span class="p">[]</span> <span class="n">urls</span><span class="p">){</span>
</span><span class='line'>                <span class="n">super</span><span class="p">(</span><span class="n">urls</span><span class="p">);</span>
</span><span class='line'>                <span class="n">map</span><span class="p">.</span><span class="n">put</span><span class="p">(</span><span class="n">this</span><span class="p">,</span> <span class="n">new</span> <span class="n">Object</span><span class="p">());</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="err">@</span><span class="n">SuppressWarnings</span><span class="p">(</span><span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">resource</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;)</span>
</span><span class='line'>        <span class="n">public</span> <span class="n">Class</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">?&gt;</span> <span class="n">loadClass</span><span class="p">(</span><span class="n">String</span> <span class="n">name</span><span class="p">)</span> <span class="n">throws</span> <span class="n">ClassNotFoundException</span> <span class="p">{</span>
</span><span class='line'>                <span class="k">if</span><span class="p">(</span><span class="n">name</span><span class="p">.</span><span class="n">equals</span><span class="p">(</span><span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">AAB</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;)</span> <span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span> <span class="n">count</span><span class="o">==</span><span class="mi">0</span><span class="p">){</span>
</span><span class='line'>                        <span class="n">try</span> <span class="p">{</span>
</span><span class='line'>                                <span class="n">count</span><span class="o">=</span><span class="mi">1</span><span class="p">;</span>
</span><span class='line'>                    <span class="n">URL</span><span class="p">[]</span> <span class="n">urls</span> <span class="o">=</span> <span class="n">new</span> <span class="n">URL</span><span class="p">[</span><span class="mi">1</span><span class="p">];</span>
</span><span class='line'>                    <span class="n">urls</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">=</span> <span class="n">new</span> <span class="n">URL</span><span class="p">(</span><span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="nl">file</span><span class="p">:</span><span class="c1">///home/nijiaben/tmp/AAB.jar&amp;rdquo;);</span>
</span><span class='line'>                    <span class="k">return</span> <span class="n">new</span> <span class="n">TestLoader</span><span class="p">(</span><span class="n">urls</span><span class="p">).</span><span class="n">loadClass</span><span class="p">(</span><span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">AAB</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;);</span>
</span><span class='line'>                <span class="p">}</span><span class="n">catch</span> <span class="p">(</span><span class="n">Exception</span> <span class="n">e</span><span class="p">){</span>
</span><span class='line'>                    <span class="n">e</span><span class="p">.</span><span class="n">printStackTrace</span><span class="p">();</span>
</span><span class='line'>                <span class="p">}</span>
</span><span class='line'>                <span class="p">}</span><span class="k">else</span><span class="p">{</span>
</span><span class='line'>                        <span class="k">return</span> <span class="n">super</span><span class="p">.</span><span class="n">loadClass</span><span class="p">(</span><span class="n">name</span><span class="p">);</span>
</span><span class='line'>                <span class="p">}</span>
</span><span class='line'>                <span class="k">return</span> <span class="n">null</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>再看我们的主类TTest，一些说明都写在类里了：</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="n">import</span> <span class="n">java</span><span class="p">.</span><span class="n">lang</span><span class="p">.</span><span class="n">reflect</span><span class="p">.</span><span class="n">Method</span><span class="p">;</span>
</span><span class='line'><span class="n">import</span> <span class="n">java</span><span class="p">.</span><span class="n">net</span><span class="p">.</span><span class="n">URL</span><span class="p">;</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;/&lt;</span><span class="n">em</span><span class="o">&gt;*</span>
</span><span class='line'> <span class="o">*</span> <span class="n">Created</span> <span class="n">by</span> <span class="n">nijiaben</span> <span class="n">on</span> <span class="mi">4</span><span class="o">/</span><span class="mi">22</span><span class="o">/</span><span class="mf">16.</span>
</span><span class='line'> <span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;/</span>
</span><span class='line'><span class="n">public</span> <span class="n">class</span> <span class="n">TTest</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">private</span> <span class="n">Object</span> <span class="n">aaa</span><span class="p">;</span>
</span><span class='line'>    <span class="n">public</span> <span class="k">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="p">(</span><span class="n">String</span> <span class="n">args</span><span class="p">[]){</span>
</span><span class='line'>        <span class="n">try</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">TTest</span> <span class="n">tt</span> <span class="o">=</span> <span class="n">new</span> <span class="n">TTest</span><span class="p">();</span>
</span><span class='line'>            <span class="c1">//将对象移到old，并置空aaa的aab属性</span>
</span><span class='line'>            <span class="n">test</span><span class="p">(</span><span class="n">tt</span><span class="p">);</span>
</span><span class='line'>            <span class="c1">//清理掉aab对象</span>
</span><span class='line'>            <span class="n">System</span><span class="p">.</span><span class="n">gc</span><span class="p">();</span>
</span><span class='line'>            <span class="n">System</span><span class="p">.</span><span class="n">out</span><span class="p">.</span><span class="n">println</span><span class="p">(</span><span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">finished</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;);</span>
</span><span class='line'>        <span class="p">}</span><span class="n">catch</span> <span class="p">(</span><span class="n">Exception</span> <span class="n">e</span><span class="p">){</span>
</span><span class='line'>            <span class="n">e</span><span class="p">.</span><span class="n">printStackTrace</span><span class="p">();</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="err">@</span><span class="n">SuppressWarnings</span><span class="p">(</span><span class="s">&quot;resource&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="n">public</span> <span class="k">static</span> <span class="kt">void</span> <span class="n">test</span><span class="p">(</span><span class="n">TTest</span> <span class="n">tt</span><span class="p">){</span>
</span><span class='line'>    <span class="n">try</span> <span class="p">{</span>
</span><span class='line'>        <span class="c1">//创建一个新的类加载器，从AAA.jar里加载AAA类</span>
</span><span class='line'>        <span class="n">URL</span><span class="p">[]</span> <span class="n">urls</span> <span class="o">=</span> <span class="n">new</span> <span class="n">URL</span><span class="p">[</span><span class="mi">1</span><span class="p">];</span>
</span><span class='line'>        <span class="n">urls</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">=</span> <span class="n">new</span> <span class="n">URL</span><span class="p">(</span><span class="s">&quot;file:///home/nijiaben/tmp/AAA.jar&quot;</span><span class="p">);</span>
</span><span class='line'>        <span class="n">tt</span><span class="p">.</span><span class="n">aaa</span><span class="o">=</span><span class="n">new</span> <span class="n">TestLoader</span><span class="p">(</span><span class="n">urls</span><span class="p">).</span><span class="n">loadClass</span><span class="p">(</span><span class="s">&quot;AAA&quot;</span><span class="p">).</span><span class="n">newInstance</span><span class="p">();</span>
</span><span class='line'>        <span class="c1">//保证类加载器对象能进入到old里，因为ygc是不会对classLoader做清理的</span>
</span><span class='line'>        <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="n">i</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="mi">10</span><span class="p">;</span><span class="n">i</span><span class="o">++</span><span class="p">){</span>
</span><span class='line'>            <span class="n">System</span><span class="p">.</span><span class="n">gc</span><span class="p">();</span>
</span><span class='line'>            <span class="n">Thread</span><span class="p">.</span><span class="n">sleep</span><span class="p">(</span><span class="mi">1000</span><span class="p">);</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="c1">//将aaa里的aab属性清空掉，以便在后面gc的时候能清理掉aab对象，这样AAB的类加载器其实就没有什么地方有强引用了，在full gc的时候能被回收</span>
</span><span class='line'>        <span class="n">Method</span><span class="p">[]</span> <span class="n">methods</span><span class="o">=</span><span class="n">tt</span><span class="p">.</span><span class="n">aaa</span><span class="p">.</span><span class="n">getClass</span><span class="p">().</span><span class="n">getDeclaredMethods</span><span class="p">();</span>
</span><span class='line'>        <span class="k">for</span><span class="p">(</span><span class="n">Method</span> <span class="nl">m</span><span class="p">:</span><span class="n">methods</span><span class="p">){</span>
</span><span class='line'>            <span class="k">if</span><span class="p">(</span><span class="n">m</span><span class="p">.</span><span class="n">getName</span><span class="p">().</span><span class="n">equals</span><span class="p">(</span><span class="s">&quot;clear&quot;</span><span class="p">)){</span>
</span><span class='line'>                    <span class="n">m</span><span class="p">.</span><span class="n">invoke</span><span class="p">(</span><span class="n">tt</span><span class="p">.</span><span class="n">aaa</span><span class="p">);</span>
</span><span class='line'>                    <span class="k">break</span><span class="p">;</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span><span class="n">catch</span> <span class="p">(</span><span class="n">Exception</span> <span class="n">e</span><span class="p">){</span>
</span><span class='line'>        <span class="n">e</span><span class="p">.</span><span class="n">printStackTrace</span><span class="p">();</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>运行的时候请跑在JDK8下，打个断点在<code>System.out.println("finished")</code>的地方，然后做一次内存dump。</p>

<p>从上面的例子中我们得知，TTest是类加载器AppClassLoader加载的，其属性aaa的对象类型是通过TestLoader从AAA.jar里加载的，而aaa里的aab属性是从一个全新的类加载器TestLoader从AAB.jar里加载的，当我们做了多次System GC之后，这些对象会移到old，在做最后一次GC之后，aab对象会从内存里移除，其类加载器此时已经是没有任何地方的强引用了，只有一个WeakHashMap引用它，理论上做GC的时候也应该被回收，但是事实时这个AAB的这个类加载器并没有被回收，从分析结果来看，GC ROOT路径是WeakHashMap，如图所示：</p>

<p><img src="/images/2016/04/mat.png"></p>

<h2>JDK8里的metaspace</h2>

<p>这里不得不提的一个概念是JDK8里的metaspace，它是为了取代perm的，至于好处是什么，我个人觉得不是那么明显，有点费力不讨好的感觉，代码改了很多，但是实际收益并不明显，据说是oracle内部斗争的一个结果。</p>

<p>在JDK8里虽然没了perm，但是klass的信息还是要有地方存，jvm里为此分配了两块内存，一块是紧挨着heap来的，就和perm一样，专门用来存klass的信息，可以通过<code>-XX:CompressedClassSpaceSize</code>来设置大小，另外一块和它们不一定连着，主要是存非klass之外的其他信息，比如常量池什么的，可以通过<code>-XX:InitialBootClassLoaderMetaspaceSize</code>来设置，同时我们还可以通过<code>-XX:MaxMetaspaceSize</code>来设置触发metaspace回收的阈值。</p>

<p>每个类加载器都会从全局的metaspace空间里取一些metaChunk管理起来，当有类定义的时候，其实就是从这些内存里分配的，当不够的时候再去全局的metaspace里分配一块并管理起来。</p>

<p>这块具体的情况后面可以专门写一篇文章来介绍，包括内存结构，内存分配，GC等。</p>

<h2>JDK8里的ClassLoaderDataGraph</h2>

<p>每个类加载器都会对应一个ClassLoaderData的数据结构，里面会存譬如具体的类加载器对象，加载的klass，管理内存的metaspace等，它是一个链式结构，会链到下一个ClassLoaderData上，gc的时候通过ClassLoaderDataGraph来遍历这些ClassLoaderData，ClassLoaderDataGraph的第一个ClassLoaderData是bootstrapClassLoader的</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="n">class</span> <span class="nl">ClassLoaderData</span> <span class="p">:</span> <span class="n">public</span> <span class="n">CHeapObj</span><span class="o">&lt;</span><span class="n">mtClass</span><span class="o">&gt;</span> <span class="p">{</span>
</span><span class='line'>  <span class="o">&amp;</span><span class="n">hellip</span><span class="p">;</span>
</span><span class='line'>  <span class="k">static</span> <span class="n">ClassLoaderData</span> <span class="o">*</span> <span class="n">_the_null_class_loader_data</span><span class="p">;</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="n">oop</span> <span class="o">&lt;</span><span class="n">em</span><span class="o">&gt;</span><span class="n">class_loader</span><span class="p">;</span>          <span class="c1">// oop used to uniquely identify a class loader</span>
</span><span class='line'>                              <span class="c1">// class loader or a canonical class path</span>
</span><span class='line'>  <span class="n">Dependencies</span> <span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;</span><span class="n">dependencies</span><span class="p">;</span> <span class="c1">// holds dependencies from this class loader</span>
</span><span class='line'>                              <span class="c1">// data to others.&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="n">Metaspace</span> <span class="o">*</span> <span class="o">&lt;</span><span class="n">em</span><span class="o">&gt;</span><span class="n">metaspace</span><span class="p">;</span>  <span class="c1">// Meta-space where meta-data defined by the</span>
</span><span class='line'>                           <span class="c1">// classes in the class loader are allocated.</span>
</span><span class='line'>  <span class="n">Mutex</span><span class="o">*</span> <span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;</span><span class="n">metaspace_lock</span><span class="p">;</span>  <span class="c1">// Locks the metaspace for allocations and setup.</span>
</span><span class='line'>  <span class="kt">bool</span> <span class="o">&lt;</span><span class="n">em</span><span class="o">&gt;</span><span class="n">unloading</span><span class="p">;</span>         <span class="c1">// true if this class loader goes away</span>
</span><span class='line'>  <span class="kt">bool</span> <span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;</span><span class="n">keep_alive</span><span class="p">;</span>        <span class="c1">// if this CLD is kept alive without a keep_alive_object().</span>
</span><span class='line'>  <span class="kt">bool</span> <span class="o">&lt;</span><span class="n">em</span><span class="o">&gt;</span><span class="n">is_anonymous</span><span class="p">;</span>      <span class="c1">// if this CLD is for an anonymous class</span>
</span><span class='line'>  <span class="k">volatile</span> <span class="kt">int</span> <span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;</span><span class="n">claimed</span><span class="p">;</span>   <span class="c1">// true if claimed, for example during GC traces.</span>
</span><span class='line'>                           <span class="c1">// To avoid applying oop closure more than once.</span>
</span><span class='line'>                           <span class="c1">// Has to be an int because we cas it.</span>
</span><span class='line'>  <span class="n">Klass</span><span class="o">*</span> <span class="n">_klasses</span><span class="p">;</span>         <span class="c1">// The classes defined by the class loader.&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="n">JNIHandleBlock</span><span class="o">*</span> <span class="n">_handles</span><span class="p">;</span> <span class="c1">// Handles to constant pool arrays&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="c1">// These method IDs are created for the class loader and set to NULL when the</span>
</span><span class='line'>  <span class="c1">// class loader is unloaded.  They are rarely freed, only for redefine classes</span>
</span><span class='line'>  <span class="c1">// and if they lose a data race in InstanceKlass.</span>
</span><span class='line'>  <span class="n">JNIMethodBlock</span><span class="o">*</span>                  <span class="n">_jmethod_ids</span><span class="p">;</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="c1">// Metadata to be deallocated when it&amp;rsquo;s safe at class unloading, when</span>
</span><span class='line'>  <span class="c1">// this class loader isn&amp;rsquo;t unloaded itself.</span>
</span><span class='line'>  <span class="n">GrowableArray</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">Metadata</span><span class="o">&lt;</span><span class="n">em</span><span class="o">&gt;&gt;&lt;/</span><span class="n">em</span><span class="o">&gt;</span>      <span class="n">_deallocate_list</span><span class="p">;</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="c1">// Support for walking class loader data objects</span>
</span><span class='line'>  <span class="n">ClassLoaderData</span><span class="o">*</span> <span class="n">_next</span><span class="p">;</span> <span class="c1">/// Next loader_datas created&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="c1">// ReadOnly and ReadWrite metaspaces (static because only on the null</span>
</span><span class='line'>  <span class="c1">// class loader for now).</span>
</span><span class='line'>  <span class="k">static</span> <span class="n">Metaspace</span><span class="o">&lt;</span><span class="n">em</span><span class="o">&gt;</span> <span class="n">_ro_metaspace</span><span class="p">;</span>
</span><span class='line'>  <span class="k">static</span> <span class="n">Metaspace</span><span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;</span> <span class="n">_rw_metaspace</span><span class="p">;</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="o">&amp;</span><span class="n">hellip</span><span class="p">;</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>这里提几个属性：</p>

<ul>
<li><code>_class_loader</code> : 就是对应的类加载器对象</li>
<li><code>_keep_alive</code> : 如果这个值是true，那这个类加载器会认为是活的，会将其做为GC ROOT的一部分，gc的时候不会被回收</li>
<li><code>_unloading</code> : 表示这个类加载是否需要卸载的</li>
<li><code>_is_anonymous</code> : 是否匿名，这种ClassLoaderData主要是在lambda表达式里用的，这个我后面会详细说</li>
<li><code>_next</code> : 指向下一个ClassLoaderData，在gc的时候方便遍历</li>
<li><code>_dependencies</code> : 这个属性也是本文的重点，后面会细说</li>
</ul>


<p>再来看下构造函数：</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="n">ClassLoaderData</span><span class="o">::</span><span class="n">ClassLoaderData</span><span class="p">(</span><span class="n">Handle</span> <span class="n">h_class_loader</span><span class="p">,</span> <span class="kt">bool</span> <span class="n">is_anonymous</span><span class="p">,</span> <span class="n">Dependencies</span> <span class="n">dependencies</span><span class="p">)</span> <span class="o">:</span>
</span><span class='line'>  <span class="o">&lt;</span><span class="n">em</span><span class="o">&gt;</span><span class="n">class_loader</span><span class="p">(</span><span class="n">h_class_loader</span><span class="p">()),</span>
</span><span class='line'>  <span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;</span><span class="n">is_anonymous</span><span class="p">(</span><span class="n">is_anonymous</span><span class="p">),</span>
</span><span class='line'>  <span class="c1">// An anonymous class loader data doesn&amp;rsquo;t have anything to keep</span>
</span><span class='line'>  <span class="c1">// it from being unloaded during parsing of the anonymous class.</span>
</span><span class='line'>  <span class="c1">// The null-class-loader should always be kept alive.</span>
</span><span class='line'>  <span class="o">&lt;</span><span class="n">em</span><span class="o">&gt;</span><span class="n">keep_alive</span><span class="p">(</span><span class="n">is_anonymous</span> <span class="o">||</span> <span class="n">h_class_loader</span><span class="p">.</span><span class="n">is_null</span><span class="p">()),</span>
</span><span class='line'>  <span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;</span><span class="n">metaspace</span><span class="p">(</span><span class="nb">NULL</span><span class="p">),</span> <span class="o">&lt;</span><span class="n">em</span><span class="o">&gt;</span><span class="n">unloading</span><span class="p">(</span><span class="nb">false</span><span class="p">),</span> <span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;</span><span class="n">klasses</span><span class="p">(</span><span class="nb">NULL</span><span class="p">),</span>
</span><span class='line'>  <span class="o">&lt;</span><span class="n">em</span><span class="o">&gt;</span><span class="n">claimed</span><span class="p">(</span><span class="mi">0</span><span class="p">),</span> <span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;</span><span class="n">jmethod_ids</span><span class="p">(</span><span class="nb">NULL</span><span class="p">),</span> <span class="o">&lt;</span><span class="n">em</span><span class="o">&gt;</span><span class="n">handles</span><span class="p">(</span><span class="nb">NULL</span><span class="p">),</span> <span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;</span><span class="n">deallocate_list</span><span class="p">(</span><span class="nb">NULL</span><span class="p">),</span>
</span><span class='line'>  <span class="o">&lt;</span><span class="n">em</span><span class="o">&gt;</span><span class="n">next</span><span class="p">(</span><span class="nb">NULL</span><span class="p">),</span> <span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;</span><span class="n">dependencies</span><span class="p">(</span><span class="n">dependencies</span><span class="p">),</span>
</span><span class='line'>  <span class="n">_metaspace_lock</span><span class="p">(</span><span class="n">new</span> <span class="n">Mutex</span><span class="p">(</span><span class="n">Monitor</span><span class="o">::</span><span class="n">leaf</span><span class="o">+</span><span class="mi">1</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">Metaspace</span> <span class="n">allocation</span> <span class="n">lock</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;,</span> <span class="nb">true</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">// empty</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>
可见，<code>_keep_ailve</code>属性的值是根据<code>_is_anonymous</code>以及当前类加载器是不是bootstrapClassLoader来的。</p>

<p><code>_keep_alive</code>到底用在哪？其实是在GC的的时候，来决定要不要用Closure或者用什么Closure来扫描对应的ClassLoaderData。</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="kt">void</span> <span class="n">ClassLoaderDataGraph</span><span class="o">::</span><span class="n">roots_cld_do</span><span class="p">(</span><span class="n">CLDClosure</span><span class="o">&lt;</span><span class="n">em</span><span class="o">&gt;</span> <span class="n">strong</span><span class="p">,</span> <span class="n">CLDClosure</span><span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;</span> <span class="n">weak</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="c1">//从最后一个创建的classloader到bootstrapClassloader&lt;br/&gt;</span>
</span><span class='line'>  <span class="k">for</span> <span class="p">(</span><span class="n">ClassLoaderData</span><span class="o">&lt;</span><span class="n">em</span><span class="o">&gt;</span> <span class="n">cld</span> <span class="o">=</span> <span class="o">&lt;</span><span class="n">em</span><span class="o">&gt;</span><span class="n">head</span><span class="p">;</span>  <span class="n">cld</span> <span class="o">!=</span> <span class="nb">NULL</span><span class="p">;</span> <span class="n">cld</span> <span class="o">=</span> <span class="n">cld</span><span class="o">-&gt;&lt;/</span><span class="n">em</span><span class="o">&gt;</span><span class="n">next</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">//如果是ygc，那weak和strong是一样的，对所有的类加载器都做扫描，保证它们都是活的</span>
</span><span class='line'>    <span class="c1">//如果是cms initmark阶段，如果要unload_classes了(should_unload_classes()返回true)，则weak为null，那就只遍历bootstrapclassloader以及正在做匿名类加载的类加载&lt;br/&gt;</span>
</span><span class='line'>    <span class="n">CLDClosure</span><span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;</span> <span class="n">closure</span> <span class="o">=</span> <span class="n">cld</span><span class="o">-&gt;</span><span class="n">keep_alive</span><span class="p">()</span> <span class="o">?</span> <span class="nl">strong</span> <span class="p">:</span> <span class="n">weak</span><span class="p">;</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">closure</span> <span class="o">!=</span> <span class="nb">NULL</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">closure</span><span class="o">-&gt;</span><span class="n">do_cld</span><span class="p">(</span><span class="n">cld</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></p>

<h2>类加载器什么时候被回收</h2>

<p>类加载器是否需要被回收，其实就是看这个类加载器对象是否是活的，所谓活的就是这个类加载器加载的任何一个类或者这些类的对象是强可达的，当然还包括这个类加载器本身就是GC ROOT一部分或者有GC ROOT可达的路径，那这个类加载器就肯定不会被回收。</p>

<p>从各种GC情况来看：</p>

<ul>
<li>如果是YGC，类加载器是作为GC ROOT的，也就是都不会被回收</li>
<li>如果是Full GC，只要是死的就会被回收</li>
<li>如果是CMS GC，CMS GC过程也是会做标记的（这是默认情况，不过可以通过一些参数来改变），但是不会做真正的清理，真正的清理动作是发生在下次进入安全点的时候。</li>
</ul>


<h2>僵尸类加载器如何产生</h2>

<p>如果类加载器是与GC ROOT的对象存在真正依赖的这种关系，这种类加载器对象是活的无可厚非，我们通过zprofiler或者mat都可以分析出来，可以将链路绘出来，但是有两种情况例外：</p>

<h3>lambda匿名类加载</h3>

<p>lambda匿名类加载走的是unsafe的defineAnonymousClass方法，这个方法在vm里对应的是下面的方法</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="n">UNSAFE_ENTRY</span><span class="p">(</span><span class="n">jclass</span><span class="p">,</span> <span class="n">Unsafe_DefineAnonymousClass</span><span class="p">(</span><span class="n">JNIEnv</span> <span class="o">*</span><span class="n">env</span><span class="p">,</span> <span class="n">jobject</span> <span class="n">unsafe</span><span class="p">,</span> <span class="n">jclass</span> <span class="n">host_class</span><span class="p">,</span> <span class="n">jbyteArray</span> <span class="n">data</span><span class="p">,</span> <span class="n">jobjectArray</span> <span class="n">cp_patches_jh</span><span class="p">))</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="n">instanceKlassHandle</span> <span class="n">anon_klass</span><span class="p">;</span>
</span><span class='line'>  <span class="n">jobject</span> <span class="n">res_jh</span> <span class="o">=</span> <span class="nb">NULL</span><span class="p">;</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="n">UnsafeWrapper</span><span class="p">(</span><span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">Unsafe_DefineAnonymousClass</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;);</span>
</span><span class='line'>  <span class="n">ResourceMark</span> <span class="nf">rm</span><span class="p">(</span><span class="n">THREAD</span><span class="p">);</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="n">HeapWord</span><span class="o">*</span> <span class="n">temp_alloc</span> <span class="o">=</span> <span class="nb">NULL</span><span class="p">;</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="n">anon_klass</span> <span class="o">=</span> <span class="n">Unsafe_DefineAnonymousClass_impl</span><span class="p">(</span><span class="n">env</span><span class="p">,</span> <span class="n">host_class</span><span class="p">,</span> <span class="n">data</span><span class="p">,</span>
</span><span class='line'>                                                <span class="n">cp_patches_jh</span><span class="p">,</span>
</span><span class='line'>                                                   <span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="n">temp_alloc</span><span class="p">,</span> <span class="n">THREAD</span><span class="p">);</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="n">anon_klass</span><span class="p">()</span> <span class="o">!=</span> <span class="nb">NULL</span><span class="p">)</span>
</span><span class='line'>    <span class="n">res_jh</span> <span class="o">=</span> <span class="n">JNIHandles</span><span class="o">::</span><span class="n">make_local</span><span class="p">(</span><span class="n">env</span><span class="p">,</span> <span class="n">anon_klass</span><span class="o">-&gt;</span><span class="n">java_mirror</span><span class="p">());</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="c1">// try/finally clause:</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="n">temp_alloc</span> <span class="o">!=</span> <span class="nb">NULL</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">FREE_C_HEAP_ARRAY</span><span class="p">(</span><span class="n">HeapWord</span><span class="p">,</span> <span class="n">temp_alloc</span><span class="p">,</span> <span class="n">mtInternal</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="c1">// The anonymous class loader data has been artificially been kept alive to</span>
</span><span class='line'>  <span class="c1">// this point.   The mirror and any instances of this class have to keep</span>
</span><span class='line'>  <span class="c1">// it alive afterwards.</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="n">anon_klass</span><span class="p">()</span> <span class="o">!=</span> <span class="nb">NULL</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">anon_klass</span><span class="o">-&gt;</span><span class="n">class_loader_data</span><span class="p">()</span><span class="o">-&gt;</span><span class="n">set_keep_alive</span><span class="p">(</span><span class="nb">false</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="c1">// let caller initialize it as needed&amp;hellip;&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="k">return</span> <span class="p">(</span><span class="n">jclass</span><span class="p">)</span> <span class="n">res_jh</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="n">UNSAFE_END</span>
</span><span class='line'><span class="p">}</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure>
可见，在创建成功匿名类之后，会将对应的ClassLoaderData的<code>_keep_alive</code>属性设置为false，那是不是意味着<code>_keep_alive</code>属性在这之前都是true呢？下面的<code>parse_stream</code>方法是从上面的方法最终会调下来的方法</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="n">Klass</span><span class="o">&lt;</span><span class="n">em</span><span class="o">&gt;</span> <span class="n">SystemDictionary</span><span class="o">::</span><span class="n">parse_stream</span><span class="p">(</span><span class="n">Symbol</span><span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;</span> <span class="n">class_name</span><span class="p">,</span>
</span><span class='line'>                                      <span class="n">Handle</span> <span class="n">class_loader</span><span class="p">,</span>
</span><span class='line'>                                      <span class="n">Handle</span> <span class="n">protection_domain</span><span class="p">,</span>
</span><span class='line'>                                      <span class="n">ClassFileStream</span><span class="o">&lt;</span><span class="n">em</span><span class="o">&gt;</span> <span class="n">st</span><span class="p">,</span>
</span><span class='line'>                                      <span class="n">KlassHandle</span> <span class="n">host_klass</span><span class="p">,</span>
</span><span class='line'>                                      <span class="n">GrowableArray</span><span class="o">&lt;</span><span class="n">Handle</span><span class="o">&gt;&lt;/</span><span class="n">em</span><span class="o">&gt;</span> <span class="n">cp_patches</span><span class="p">,</span>
</span><span class='line'>                                      <span class="n">TRAPS</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">TempNewSymbol</span> <span class="n">parsed_name</span> <span class="o">=</span> <span class="nb">NULL</span><span class="p">;</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="n">Ticks</span> <span class="n">class_load_start_time</span> <span class="o">=</span> <span class="n">Ticks</span><span class="o">::</span><span class="n">now</span><span class="p">();</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="n">ClassLoaderData</span><span class="o">*</span> <span class="n">loader_data</span><span class="p">;</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="n">host_klass</span><span class="p">.</span><span class="n">not_null</span><span class="p">())</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">// Create a new CLD for anonymous class, that uses the same class loader</span>
</span><span class='line'>    <span class="c1">// as the host_klass</span>
</span><span class='line'>    <span class="n">assert</span><span class="p">(</span><span class="n">EnableInvokeDynamic</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;);</span>
</span><span class='line'>    <span class="n">guarantee</span><span class="p">(</span><span class="n">host_klass</span><span class="o">-&gt;</span><span class="n">class_loader</span><span class="p">()</span> <span class="o">==</span> <span class="n">class_loader</span><span class="p">(),</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">should</span> <span class="n">be</span> <span class="n">the</span> <span class="n">same</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;);</span>
</span><span class='line'>    <span class="n">guarantee</span><span class="p">(</span><span class="o">!</span><span class="n">DumpSharedSpaces</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">must</span> <span class="n">not</span> <span class="n">create</span> <span class="n">anonymous</span> <span class="n">classes</span> <span class="n">when</span> <span class="n">dumping</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;);</span>
</span><span class='line'>    <span class="n">loader_data</span> <span class="o">=</span> <span class="n">ClassLoaderData</span><span class="o">::</span><span class="n">anonymous_class_loader_data</span><span class="p">(</span><span class="n">class_loader</span><span class="p">(),</span> <span class="n">CHECK_NULL</span><span class="p">);</span>
</span><span class='line'>    <span class="n">loader_data</span><span class="o">-&gt;</span><span class="n">record_dependency</span><span class="p">(</span><span class="n">host_klass</span><span class="p">(),</span> <span class="n">CHECK_NULL</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">loader_data</span> <span class="o">=</span> <span class="n">ClassLoaderData</span><span class="o">::</span><span class="n">class_loader_data</span><span class="p">(</span><span class="n">class_loader</span><span class="p">());</span>
</span><span class='line'>  <span class="p">}</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="n">instanceKlassHandle</span> <span class="n">k</span> <span class="o">=</span> <span class="n">ClassFileParser</span><span class="p">(</span><span class="n">st</span><span class="p">).</span><span class="n">parseClassFile</span><span class="p">(</span><span class="n">class_name</span><span class="p">,</span>
</span><span class='line'>                                                             <span class="n">loader_data</span><span class="p">,</span>
</span><span class='line'>                                                             <span class="n">protection_domain</span><span class="p">,</span>
</span><span class='line'>                                                             <span class="n">host_klass</span><span class="p">,</span>
</span><span class='line'>                                                             <span class="n">cp_patches</span><span class="p">,</span>
</span><span class='line'>                                                             <span class="n">parsed_name</span><span class="p">,</span>
</span><span class='line'>                                                             <span class="nb">true</span><span class="p">,</span>
</span><span class='line'>                                                             <span class="n">THREAD</span><span class="p">);</span>
</span><span class='line'><span class="o">&amp;</span><span class="n">hellip</span><span class="p">;</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="p">}</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">ClassLoaderData</span><span class="o">*</span> <span class="n">ClassLoaderData</span><span class="o">::</span><span class="n">anonymous_class_loader_data</span><span class="p">(</span><span class="n">oop</span> <span class="n">loader</span><span class="p">,</span> <span class="n">TRAPS</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="c1">// Add a new class loader data to the graph.</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">ClassLoaderDataGraph</span><span class="o">::</span><span class="n">add</span><span class="p">(</span><span class="n">loader</span><span class="p">,</span> <span class="nb">true</span><span class="p">,</span> <span class="n">CHECK_NULL</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">ClassLoaderData</span><span class="o">*</span> <span class="n">ClassLoaderDataGraph</span><span class="o">::</span><span class="n">add</span><span class="p">(</span><span class="n">Handle</span> <span class="n">loader</span><span class="p">,</span> <span class="kt">bool</span> <span class="n">is_anonymous</span><span class="p">,</span> <span class="n">TRAPS</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="c1">// We need to allocate all the oops for the ClassLoaderData before allocating the</span>
</span><span class='line'>  <span class="c1">// actual ClassLoaderData object.</span>
</span><span class='line'>  <span class="n">ClassLoaderData</span><span class="o">::</span><span class="n">Dependencies</span> <span class="n">dependencies</span><span class="p">(</span><span class="n">CHECK_NULL</span><span class="p">);</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="n">No_Safepoint_Verifier</span> <span class="n">no_safepoints</span><span class="p">;</span> <span class="c1">// we mustn&amp;rsquo;t GC until we&amp;rsquo;ve installed the</span>
</span><span class='line'>                                       <span class="c1">// ClassLoaderData in the graph since the CLD</span>
</span><span class='line'>                                       <span class="c1">// contains unhandled oops&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="n">ClassLoaderData</span><span class="o">*</span> <span class="n">cld</span> <span class="o">=</span> <span class="n">new</span> <span class="n">ClassLoaderData</span><span class="p">(</span><span class="n">loader</span><span class="p">,</span> <span class="n">is_anonymous</span><span class="p">,</span> <span class="n">dependencies</span><span class="p">);</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;&amp;</span><span class="n">hellip</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>从上面的代码得知，只要走了unsafe的那个方法，都会为当前类加载器创建一个ClassLoaderData对象，并设置其<code>_is_anonymous</code>为true，也同时意味着<code>_keep_alive</code>的属性是true，并加入到ClassLoaderDataGraph中。</p>

<p>试想如果创建的这个匿名类没有成功，也就是<code>anon_klass()==null</code>，那这个<code>_keep_alive</code>属性就永远无法设置为false了，这意味着这个ClassLoaderData对应的ClassLoader对象将永远都是GC ROOT的一部分，无法被回收，这种情况就是真正的僵尸类加载器了，不过目前我还没模拟出这种情况来，有兴趣的同学可以试一试，如果真的能模拟出来，这绝对是JDK里的一个BUG，可以提交给社区。</p>

<h3>类加载器依赖导致的</h3>

<p>这里说的类加载器依赖，并不是说ClassLoader里的parent建立的那种依赖关系，如果是这种关系，那其实通过mat或者zprofiler这样的工具都是可以分析出来的，但是还存在一种情况，那些工具都是分析不出来的，这种关系就是通过ClassLoaderData里的<code>_dependencies</code>属性得出来的，比如说如果A类加载器的<code>_dependencies</code>属性里记录了B类加载器，那当GC遍历A类加载器的时候也会遍历B类加载器，并将其标活，哪怕B类加载器其实是可以被回收了的，可以看下下面的代码</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="kt">void</span> <span class="n">ClassLoaderData</span><span class="o">::</span><span class="n">oops_do</span><span class="p">(</span><span class="n">OopClosure</span><span class="o">&lt;</span><span class="n">em</span><span class="o">&gt;</span> <span class="n">f</span><span class="p">,</span> <span class="n">KlassClosure</span><span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;</span> <span class="n">klass_closure</span><span class="p">,</span> <span class="kt">bool</span> <span class="n">must_claim</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="n">must_claim</span> <span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span> <span class="o">!</span><span class="n">claim</span><span class="p">())</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="n">f</span><span class="o">-&gt;</span><span class="n">do_oop</span><span class="p">(</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="o">&lt;</span><span class="n">em</span><span class="o">&gt;</span><span class="n">class_loader</span><span class="p">);</span>
</span><span class='line'>  <span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;</span><span class="n">dependencies</span><span class="p">.</span><span class="n">oops_do</span><span class="p">(</span><span class="n">f</span><span class="p">);</span>
</span><span class='line'>  <span class="n">_handles</span><span class="o">-&gt;</span><span class="n">oops_do</span><span class="p">(</span><span class="n">f</span><span class="p">);</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="n">klass_closure</span> <span class="o">!=</span> <span class="nb">NULL</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">classes_do</span><span class="p">(</span><span class="n">klass_closure</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>那问题来了，这种依赖关系是怎么记录的呢？其实我们上面的demo就模拟了这种情况，可以仔细去看看，我也针对这个demo描述下，比如加载AAA的类加载器TestLoader加载AAA后，并创建AAA对象，此时会看到有个类型是AAB的属性，此时会对常量池里的类型做一个解析，我们看到TestLoader的loadClass方法的时候做了一个判断，如果是AAB类型的类加载，那就创建一个新的类加载器对象从AAB.jar里去加载，当加载返回的时候，在jvm里其实就会记录这么一层依赖关系，认为AAA的类加载器依赖AAB的类加载器，并记录下来，但是纵观所有的hotspot代码，并没有一个地方来清理这种依赖关系的，也就是说只要这种依赖关系建立起来，会一直持续到AAA的类加载器被回收的时候，AAB的类加载器才会被回收，所以说这算一种伪僵尸类加载器，虽然从依赖关系上其实并不依赖了(比如demo里将AAA的aab属性做clear清空动作)，但是GC会一直认为他们是存在这种依赖关系的，会持续存在一段时间，具体持续多久就看AAA类加载器的情况了。</p>

<p>针对这种情况个人认为需要一个类似引用计数的GC策略，当某两个类加载器确实没有任何依赖的时候，将其清理掉这种依赖关系，估计要实现这种改动的地方也挺多，没那么简单，所以当时的设计者或许因为这样并没有这么做了，我觉得这算是偷懒妥协的结果吧，当然这只是我的一种猜测。</p>

<h1>欢迎各位关注个人微信公众号，主要围绕JVM写一系列的原理性，性能调优的文章</h1>

<p><img src="/images/gzh.jpg" width="200" height="200"></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[JDK8在泛型类型推导上的变化]]></title>
    <link href="http://nijiaben.github.io/blog/2016/04/03/type-inference/"/>
    <updated>2016-04-03T12:50:39+08:00</updated>
    <id>http://nijiaben.github.io/blog/2016/04/03/type-inference</id>
    <content type="html"><![CDATA[<h2>概述</h2>

<p>最近公司在大面积推广JDK8，整体来说升级上来算顺利的，大部分问题可能在编译期就碰到了，但是有些时候比较蛋疼，编译期没有出现问题，但是在运行期就出了问题，比如今天要说的这个话题，所以大家再升级的时候还是要多测测再上线，当然JDK8给我们带来了不少收益，花点时间升级上来还是值得的。</p>

<!--more-->


<h2>问题描述</h2>

<p>还是老规矩，先上demo，让大家直观地知道我们要说的问题。</p>

<pre><code>public class Test {
      static &lt;T extends Number&gt; T getObject() {
            return (T)Long.valueOf(1L);
      }

      public static void main(String... args) throws Exception {
            StringBuilder sb = new StringBuilder();
            sb.append(getObject());
      }
}
</code></pre>

<p>demo很简单，就是有个使用了泛型的函数getObject，其返回类型是Number的子类，然后我们将函数返回值传给StringBuilder的多态方法append，我们知道append方法有很多，参数类型也很多，但是唯独没有参数是Number的append方法，如果有的话，大家应该猜到会优先选择这个方法了，既然没有，那到底会选哪个呢，我们分别用jdk6(jdk7类似)和jdk8来编译下上面的类，然后用javap看看输出结果（只看main方法）：</p>

<p>jdk6编译的字节码：</p>

<pre><code>public static void main(java.lang.String...) throws java.lang.Exception;
    flags: ACC_PUBLIC, ACC_STATIC, ACC_VARARGS
    Code:
      stack=2, locals=2, args_size=1
         0: new           #3                  // class java/lang/StringBuilder
         3: dup
         4: invokespecial #4                  // Method java/lang/StringBuilder."&lt;init&gt;":()V
         7: astore_1
         8: aload_1
         9: invokestatic  #5                  // Method getObject:()Ljava/lang/Number;
        12: invokevirtual #6                  // Method java/lang/StringBuilder.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;
        15: pop
        16: return
      LineNumberTable:
        line 8: 0
        line 9: 8
        line 10: 16
    Exceptions:
      throws java.lang.Exception
</code></pre>

<p>jdk8编译的字节码：</p>

<pre><code>public static void main(java.lang.String...) throws java.lang.Exception;
    descriptor: ([Ljava/lang/String;)V
    flags: ACC_PUBLIC, ACC_STATIC, ACC_VARARGS
    Code:
      stack=2, locals=2, args_size=1
         0: new           #3                  // class java/lang/StringBuilder
         3: dup
         4: invokespecial #4                  // Method java/lang/StringBuilder."&lt;init&gt;":()V
         7: astore_1
         8: aload_1
         9: invokestatic  #5                  // Method getObject:()Ljava/lang/Number;
        12: checkcast     #6                  // class java/lang/CharSequence
        15: invokevirtual #7                  // Method java/lang/StringBuilder.append:(Ljava/lang/CharSequence;)Ljava/lang/StringBuilder;
        18: pop
        19: return
      LineNumberTable:
        line 8: 0
        line 9: 8
        line 10: 19
    Exceptions:
      throws java.lang.Exception
</code></pre>

<p>对比上面那个的差异，我们看到bci从12开始变了，jdk8里多了下面这行表示要对栈顶的数据做一次类型检查看是不是CharSequence类型：</p>

<pre><code> 12: checkcast     #6                  // class java/lang/CharSequence
</code></pre>

<p>另外调用的StringBuilder的append方法也是不一样的，jdk7里是调用的参数为Object类型的append方法，而jdk8里调用的是CharSequence类型的append方法。</p>

<p>最主要的是在jdk6和jdk8下运行上面的代码，在jdk6下是正常跑过的，但是在jdk8下是直接抛出异常的：</p>

<pre><code>Exception in thread "main" java.lang.ClassCastException: java.lang.Long cannot be cast to java.lang.CharSequence
    at Test.main(Test.java:9)
</code></pre>

<p>至此问题整个应该描述清楚了。</p>

<h2>问题分析</h2>

<p>先来说说如果要我们来做这个java编译器实现这个功能，我们要怎么来做，其他的都是很明确的，重点在于如下这段如何来确定append的方法使用哪个：</p>

<pre><code>sb.append(getObject());
</code></pre>

<p>我们知道getObject()返回的是个泛型对象，这个对象是Number的子类，因此我们首先会去遍历StringBuilder的所有可见的方法，包括从父类继承过来的，找是不是存在一个方法叫做append，并且参数类型是Number的方法，如果有，那就直接使用这个方法，如果没有，那我们得想办法找到一个最合适的方法，关键就在于这个合适怎么定义，比如说我们看到有个append的方法，其参数是Object类型的，Number是Object的子类，所以我们选择这个方法肯定没问题，假如说另外有个append方法，其参数是Serializable类型(当然其实并没有这种参数的方法)，Number实现了这个接口，我们选择这个方法也是没问题的，那到底是Object参数的更合适还是Serializable的更合适呢，还有更甚者，我们知道StringBuilder有个方法，其参数是CharSequence，假如我们传进去的参数其实既是Number的子类，同时又实现了CharSequence这个接口，那我们究竟要不要选它呢？这些问题我们都需要去考虑，而且各有各的理由，说起来都感觉挺合理的。</p>

<h2>JDK6里泛型的类型推导</h2>

<p>这里分析的是jdk6的javac代码，不过大致看了下jdk7的这块针对这个问题的逻辑也差不多，所以就以这块为例了，jdk6里的泛型类型推导其实比较简单，从上面的输出结果我们也猜到了，其实就是选了参数为Object类型的append方法，它觉得它是最合适的：</p>

<pre><code>private Symbol findMethod(Env&lt;AttrContext&gt; env,
                              Type site,
                              Name name,
                              List&lt;Type&gt; argtypes,
                              List&lt;Type&gt; typeargtypes,
                              Type intype,
                              boolean abstractok,
                              Symbol bestSoFar,
                              boolean allowBoxing,
                              boolean useVarargs,
                              boolean operator) {
        for (Type ct = intype; ct.tag == CLASS; ct = types.supertype(ct)) {
            ClassSymbol c = (ClassSymbol)ct.tsym;
            if ((c.flags() &amp; (ABSTRACT | INTERFACE | ENUM)) == 0)
                abstractok = false;
            for (Scope.Entry e = c.members().lookup(name);
                 e.scope != null;
                 e = e.next()) {
                //- System.out.println(" e " + e.sym);
                if (e.sym.kind == MTH &amp;&amp;
                    (e.sym.flags_field &amp; SYNTHETIC) == 0) {
                    bestSoFar = selectBest(env, site, argtypes, typeargtypes,
                                           e.sym, bestSoFar,
                                           allowBoxing,
                                           useVarargs,
                                           operator);
                }
            }
            //- System.out.println(" - " + bestSoFar);
            if (abstractok) {
                Symbol concrete = methodNotFound;
                if ((bestSoFar.flags() &amp; ABSTRACT) == 0)
                    concrete = bestSoFar;
                for (List&lt;Type&gt; l = types.interfaces(c.type);
                     l.nonEmpty();
                     l = l.tail) {
                    bestSoFar = findMethod(env, site, name, argtypes,
                                           typeargtypes,
                                           l.head, abstractok, bestSoFar,
                                           allowBoxing, useVarargs, operator);
                }
            if (concrete != bestSoFar &amp;&amp;
                    concrete.kind &lt; ERR  &amp;&amp; bestSoFar.kind &lt; ERR &amp;&amp;
                    types.isSubSignature(concrete.type, bestSoFar.type))
                    bestSoFar = concrete;
            }
        }
        return bestSoFar;
    }
</code></pre>

<p>上面的逻辑大概是遍历当前类(比如这个例子中的StringBuilder)及其父类，依次从他们的方法里找出一个最合适的方法返回，重点就落在了selectBest这个方法上:</p>

<pre><code>Symbol selectBest(Env&lt;AttrContext&gt; env,
                      Type site,
                      List&lt;Type&gt; argtypes,
                      List&lt;Type&gt; typeargtypes,
                      Symbol sym,
                      Symbol bestSoFar,
                      boolean allowBoxing,
                      boolean useVarargs,
                      boolean operator) {
        if (sym.kind == ERR) return bestSoFar;
        if (!sym.isInheritedIn(site.tsym, types)) return bestSoFar;
        assert sym.kind &lt; AMBIGUOUS;
        try {
            if (rawInstantiate(env, site, sym, argtypes, typeargtypes,
                               allowBoxing, useVarargs, Warner.noWarnings) == null) {
                // inapplicable
                switch (bestSoFar.kind) {
                case ABSENT_MTH: return wrongMethod.setWrongSym(sym);
                case WRONG_MTH: return wrongMethods;
                default: return bestSoFar;
                }
            }
        } catch (Infer.NoInstanceException ex) {
            switch (bestSoFar.kind) {
            case ABSENT_MTH:
                return wrongMethod.setWrongSym(sym, ex.getDiagnostic());
            case WRONG_MTH:
                return wrongMethods;
            default:
                return bestSoFar;
            }
        }
        if (!isAccessible(env, site, sym)) {
            return (bestSoFar.kind == ABSENT_MTH)
                ? new AccessError(env, site, sym)
                : bestSoFar;
        }
        return (bestSoFar.kind &gt; AMBIGUOUS)
            ? sym
            : mostSpecific(sym, bestSoFar, env, site,
                           allowBoxing &amp;&amp; operator, useVarargs);
    }
</code></pre>

<p>这个方法的主要逻辑落在rawInstantiate这个方法里(具体代码不贴了，有兴趣的去看下代码，我将最终最关键的调用方法argumentsAcceptable贴出来，主要做参数的匹配)，如果当前方法也合适，那就和之前挑出来的最好的方法做一个比较看谁最适合，这个选择过程在最后的mostSpecific方法里，其实就和冒泡排序差不多，不过是找最接近的那个类型(逐层找对应是父类的方法，和最小公倍数有点类似)。</p>

<pre><code class="">    boolean argumentsAcceptable(List&lt;Type&gt; argtypes,
                                List&lt;Type&gt; formals,
                                boolean allowBoxing,
                                boolean useVarargs,
                                Warner warn) {
        Type varargsFormal = useVarargs ? formals.last() : null;
        while (argtypes.nonEmpty() &amp;&amp; formals.head != varargsFormal) {
            boolean works = allowBoxing
                ? types.isConvertible(argtypes.head, formals.head, warn)
                : types.isSubtypeUnchecked(argtypes.head, formals.head, warn);
            if (!works) return false;
            argtypes = argtypes.tail;
            formals = formals.tail;
        }
        if (formals.head != varargsFormal) return false; // not enough args
        if (!useVarargs)
            return argtypes.isEmpty();
        Type elt = types.elemtype(varargsFormal);
        while (argtypes.nonEmpty()) {
            if (!types.isConvertible(argtypes.head, elt, warn))
                return false;
            argtypes = argtypes.tail;
        }
        return true;
    }    
</code></pre>

<p>针对具体的例子其实就是看StringBuilder里的哪个方法的参数是Number的父类，如果不是就表示没有找到，如果参数都符合期望就表示找到，然后返回。</p>

<p>所以jdk6里的这块的逻辑相对来说比较简单。</p>

<h2>JDK8里泛型的类型推导</h2>

<p>jdk8里的推导相对来说比较复杂，不过大部分逻辑和上面的都差不多，但是argumentsAcceptable这块的变动比较大，增加了一些数据结构，规则变得更加复杂，考虑的场景也更多了，因为代码嵌套层数很深，具体的代码我就不贴了，有兴趣的自己去跟下代码（具体变化可以从AbstractMethodCheck.argumentsAcceptable这个方法开始）。</p>

<p>针对具体这个demo，如果getObject返回的对象既实现了CharSequence，又是Number的子类，那它认为这种情况其实选择参数为CharSequence类型的append方法比参数为Object类型的方法更合适，看起来是要求更严格一些了，适用范围收窄了一些，不是去匹配大而范的接口方法，因此其多加了一层checkcast的检查，不过我个人观点是觉得这块有点太激进了。</p>

<h1>欢迎各位关注个人微信公众号，主要围绕JVM写一系列的原理性，性能调优的文章</h1>

<p><img src="/images/gzh.jpg" width="200" height="200"></p>
]]></content>
  </entry>
  
</feed>
